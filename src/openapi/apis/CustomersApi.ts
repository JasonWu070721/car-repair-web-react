/* tslint:disable */
/* eslint-disable */
/**
 * Simple API overview
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomersIdGet200Response,
  CustomersIdPutRequest,
} from '../models';
import {
    CustomersIdGet200ResponseFromJSON,
    CustomersIdGet200ResponseToJSON,
    CustomersIdPutRequestFromJSON,
    CustomersIdPutRequestToJSON,
} from '../models';

export interface CustomersIdDeleteRequest {
    id: any;
}

export interface CustomersIdGetRequest {
    id: any;
}

export interface CustomersIdPutOperationRequest {
    id: any;
    customersIdPutRequest: CustomersIdPutRequest;
}

export interface CustomersPostRequest {
    customersIdPutRequest: CustomersIdPutRequest;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     * Returns a customer by ID.
     */
    async customersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a customer by ID.
     */
    async customersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.customersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * delete a customer by ID.
     */
    async customersIdDeleteRaw(requestParameters: CustomersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete a customer by ID.
     */
    async customersIdDelete(requestParameters: CustomersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a customer by ID.
     */
    async customersIdGetRaw(requestParameters: CustomersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomersIdGet200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a customer by ID.
     */
    async customersIdGet(requestParameters: CustomersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomersIdGet200Response> {
        const response = await this.customersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a customer by ID.
     */
    async customersIdPutRaw(requestParameters: CustomersIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomersIdGet200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customersIdPut.');
        }

        if (requestParameters.customersIdPutRequest === null || requestParameters.customersIdPutRequest === undefined) {
            throw new runtime.RequiredError('customersIdPutRequest','Required parameter requestParameters.customersIdPutRequest was null or undefined when calling customersIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomersIdPutRequestToJSON(requestParameters.customersIdPutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a customer by ID.
     */
    async customersIdPut(requestParameters: CustomersIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomersIdGet200Response> {
        const response = await this.customersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a customer by ID.
     */
    async customersPostRaw(requestParameters: CustomersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomersIdGet200Response>> {
        if (requestParameters.customersIdPutRequest === null || requestParameters.customersIdPutRequest === undefined) {
            throw new runtime.RequiredError('customersIdPutRequest','Required parameter requestParameters.customersIdPutRequest was null or undefined when calling customersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomersIdPutRequestToJSON(requestParameters.customersIdPutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a customer by ID.
     */
    async customersPost(requestParameters: CustomersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomersIdGet200Response> {
        const response = await this.customersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
